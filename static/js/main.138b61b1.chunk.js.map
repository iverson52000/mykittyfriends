{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","width","height","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","size","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundary","state","hasError","this","setState","Component","App","searchfield","onSearchChange","bind","fetch","then","res","json","users","event","target","value","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAeeA,EAbF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACjB,OACE,yBAAKC,UAAY,sDAChB,yBAAKC,IAAM,SAASC,IAAG,+BAA4BL,EAAG,IAA/B,aAA+CM,MAAM,MAAMC,OAAO,QACzF,6BACE,4BAAKN,GACL,2BAAIC,MCaKM,EAnBE,SAACT,GAAW,IACrBU,EAAUV,EAAVU,OACP,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAOD,EACPZ,GAAMS,EAAOG,GAAGZ,GAChBC,KAAQQ,EAAOG,GAAGX,KAClBC,MAASO,EAAOG,GAAGV,aCGVY,EAfG,SAACf,GAAW,IACrBgB,EAAgBhB,EAAhBgB,aACP,OACI,6BACE,2BACEZ,UAAY,mCACZa,KAAO,SACPC,KAAO,KACPC,YAAc,6BACdC,SAAYJ,MCDPK,EARA,SAACrB,GACd,OACE,yBAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBhB,OAAQ,UAClER,EAAMyB,WCiBEC,E,YAnBb,WAAY1B,GAAO,IAAD,8BAChB,4CAAMA,KACD2B,MAAQ,CACXC,UAAU,GAHI,E,iFAQhBC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAIC,KAAKF,MAAMC,SACN,wDAEFC,KAAK7B,MAAMyB,a,GAhBMM,aC8CbC,G,kBAvCb,aAAc,IAAD,8BACX,+CACKL,MAAQ,CACXjB,OAAQ,GACRuB,YAAa,IAEf,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANX,E,iFASO,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAU,EAAKV,SAAS,CAACpB,OAAQ8B,S,qCAG5BC,GACbZ,KAAKC,SAAS,CAACG,YAAaQ,EAAMC,OAAOC,U,+BAGlC,IAAD,EACwBd,KAAKF,MAA5BjB,EADD,EACCA,OAAQuB,EADT,EACSA,YACTW,EAAiBlC,EAAOmC,QAAO,SAAAjC,GACnC,OAAOA,EAAMV,KAAK4C,cAAcC,SAASd,EAAYa,kBAEvD,OACE,yBAAK1C,UAAY,MACf,wBAAIA,UAAY,MAAhB,gBACA,kBAAC,EAAD,CAAWY,aAAgBa,KAAKK,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAAUkC,W,GA/Bdb,c,MCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.138b61b1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst {id, name, email} = props;\n\treturn(\n\t  <div className = 'tc bg-light-blue dib br3 pa3 ma3 grow bw2 shadow-5'>\n\t  \t<img alt = 'robots' src = {`https://robohash.org/${id+500}?set=set4`} width=\"200\" height=\"200\"/>\n\t  \t<div>\n\t  \t  <h2>{name}</h2>\n\t  \t  <p>{email}</p>\n\t  \t</div>\n\t  </div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n\tconst {robots} = props;\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\trobots.map((robot, i) => {\n\t\t\t\treturn( \n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey = {i} \n\t\t\t\t\t\tid = {robots[i].id} \n\t\t\t\t\t\tname = {robots[i].name} \n\t\t\t\t\t\temail = {robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\t\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (props) => {\n  const {searchChange} = props;\n  return (\n      <div>\n        <input \n          className = 'pa3 ba b--green bg-lightest-blue'\n          type = 'search' \n          size = '30'\n          placeholder = 'Search your kitty friends!'\n          onChange = {searchChange} \n        />\n      </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n    )\n}\n\nexport default Scroll","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(){\n    this.setState({hasError: true})\n  }\n\n  render(){\n    if (this.state.hasError){\n      return <h1>oooops. This is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;\n","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      robots: [], \n      searchfield: ''\n    }\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => {this.setState({robots: users})});\n  }\n\n  onSearchChange(event){\n    this.setState({searchfield: event.target.value});\n  }\n\n  render(){\n    const {robots, searchfield} = this.state\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    return (\n      <div className = 'tc'>\n        <h1 className = 'f1'>KittyFriends</h1>\n        <SearchBox searchChange = {this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots = {filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}